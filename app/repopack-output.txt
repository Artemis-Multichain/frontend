This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-05T19:03:56.770Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
challenges/
  page.tsx
generate/
  page.tsx
home/
  page.tsx
marketplace/
  page.tsx
social-feed/
  page.tsx
globals.css
layout.tsx
metadata.ts
page.tsx

================================================================
Repository Files
================================================================

================
File: challenges/page.tsx
================
import React from 'react'

const page = () => {
  return (
    <div>page</div>
  )
}

export default page

================
File: generate/page.tsx
================
'use client';

// @ts-nocheck
import React from 'react';
import GenerateSidebar from '@/components/GenerateSidebar';
import ProfileNavbar from '@/components/ProfileNavbar';
import GenerateImage from '@/components/GenerateImage';
import Head from 'next/head';
import { useEffect, useState } from 'react';

const Generate = () => {
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  return (
    mounted && (
      <>
        <div className=" relative h-screen bg-black">
          <Head>
            <title>Generate Image | Artemis AI</title>
            <meta name="description" content="Home page" />
          </Head>
          <div className="flex">
            <GenerateSidebar />

            <ProfileNavbar />
          </div>

          <div className="mt-2 -ml-2">
            <GenerateImage />
          </div>
        </div>
      </>
    )
  );
};

export default Generate;

================
File: home/page.tsx
================
'use client';

import React from 'react';
import dynamic from 'next/dynamic';
import { Metadata } from 'next';

// Dynamically import components with no SSR
const Sidebar = dynamic(() => import('@/components/Sidebar'), { ssr: false });
const ProfileNavbar = dynamic(() => import('@/components/ProfileNavbar'), {
  ssr: false,
});
const Explore = dynamic(() => import('@/components/Explore'), { ssr: false });

const Home = () => {
  return (
    <div className="bg-black h-full">
      <div className="flex">
        <Sidebar />
        <ProfileNavbar />
      </div>

      <div>
        <Explore />
      </div>
    </div>
  );
};

export default Home;

================
File: marketplace/page.tsx
================
'use client';

import React from 'react';
import Sidebar from '@/components/Sidebar';
import ProfileNavbar from '@/components/ProfileNavbar';
import MarketplaceHeader from '@/components/MarketplaceHeader';
import ExploreTab from '@/components/tab/MarketplaceTab';
import MarketplaceC from '@/components/MarketplaceC';
import Head from 'next/head';

const Marketplace = () => {
  return (
    <>
      <div className=" h-full bg-black">
        <Head>
          <title>Marketplace | Artemis AI</title>
          <meta name="description" content="Home page" />
        </Head>
        <div className="flex ">
          <Sidebar />

          <ProfileNavbar />
        </div>

        <div className="mt-2">
          <MarketplaceC />
        </div>
      </div>
    </>
  );
};

export default Marketplace;

================
File: social-feed/page.tsx
================
'use client';

import React from 'react';
import Head from 'next/head';
import Sidebar from '@/components/Sidebar';
import ProfileNavbar from '@/components/ProfileNavbar';
import SocialHeader from '@/components/social-feed/SocialHeader';

const SocialFeed = () => {
  return (
    <>
      <div className="bg-black h-full">
        <Head>
          <title>User Feed | Artemis AI</title>
          <meta name="description" content="Home page" />
        </Head>
        <div className="flex ">
          <Sidebar />
          <ProfileNavbar />
        </div>

        <div className="">
          <SocialHeader />
        </div>
      </div>
    </>
  );
};

export default SocialFeed;

================
File: globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* nextjs-portal {
  display: none;
} */

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Eudoxus Sans', sans-serif;
  scroll-behavior: smooth;
  background: ;
}

body {
  background: #000;
}

.gradient-01 {
  background-image: linear-gradient(
    270deg,
    hsl(295deg 76% 51%) 0%,
    hsl(284deg 70% 73%) 26%,
    hsl(257deg 70% 86%) 39%,
    hsl(202deg 92% 90%) 50%,
    hsl(215deg 77% 81%) 61%,
    hsl(221deg 73% 70%) 74%,
    hsl(220deg 76% 51%) 100%
  );
  filter: blur(125px);
}

.hero-gradient {
  background: linear-gradient(
    97.86deg,
    #a509ff 0%,
    #34acc7 53.65%,
    #a134c7 100%
  );
}

.gradient-02 {
  position: absolute;
  width: 200px;
  height: 438px;
  top: 0px;
  right: 0px;

  background: #7aebfb;
  filter: blur(190px);
}

.glassmorphism {
  background: rgba(255, 255, 255, 0.25);
  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
  backdrop-filter: blur(4px);
  -webkit-backdrop-filter: blur(4px);
  border: 1px solid rgba(255, 255, 255, 0.18);
}

.gradient-03 {
  position: absolute;
  width: 404px;
  height: 800px;
  left: 20%;
  top: 5%;

  background: rgba(149, 66, 232, 0.35);
  filter: blur(175px);
  transform: rotate(-114.2deg);
}

.gradient-04 {
  position: absolute;
  width: 304px;
  height: 100vh;
  left: 30%;
  top: 10%;

  background: rgba(45, 72, 152, 0.75);
  filter: blur(200px);
  transform: rotate(-53.13deg);
}

.gradient-05 {
  background: linear-gradient(
    180deg,
    rgba(255, 255, 255, 0.04) 0%,
    rgba(255, 255, 255, 0) 100%
  );
}

.feedback-gradient {
  position: absolute;
  width: 200px;
  height: 316px;
  left: 0px;
  top: 0px;

  background: #8d39a3;
  filter: blur(175px);
}

.footer-gradient {
  position: absolute;
  width: 500px;
  height: 100px;
  left: 37%;
  bottom: 0;

  background: #65c4fa;
  filter: blur(150px);
}

.gradi {
  /* ff 3.6+ */
  background: -moz-linear-gradient(
    90deg,
    rgba(44, 44, 50, 1) 0%,
    rgba(16, 16, 16, 1) 100%
  );

  /* safari 5.1+,chrome 10+ */
  background: -webkit-linear-gradient(
    90deg,
    rgba(44, 44, 50, 1) 0%,
    rgba(16, 16, 16, 1) 100%
  );

  /* opera 11.10+ */
  background: -o-linear-gradient(
    90deg,
    rgba(44, 44, 50, 1) 0%,
    rgba(16, 16, 16, 1) 100%
  );

  /* ie 6-9 */
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#101010', endColorstr='#2C2C32', GradientType=0 );

  /* ie 10+ */
  background: -ms-linear-gradient(
    90deg,
    rgba(44, 44, 50, 1) 0%,
    rgba(16, 16, 16, 1) 100%
  );

  /* global 94%+ browsers support */
  background: linear-gradient(
    90deg,
    rgba(44, 44, 50, 1) 0%,
    rgba(16, 16, 16, 1) 100%
  );
}

.black-orange-gradient {
  background: linear-gradient(
    90deg,
    rgba(41, 41, 41, 1) 0%,
    rgba(30, 30, 30, 1) 95%,
    rgba(145, 143, 111, 0.7959558823529411) 100%
  );
}

.feature-bal {
  background: linear-gradient(
    90deg,
    rgba(30, 30, 30, 1) 0%,
    rgba(30, 30, 30, 1) 50%,
    rgba(14, 14, 14, 1) 100%
  );
}

.animated_gradient {
  background: linear-gradient(270deg, #0a0e10, #5d5b61);
  background-size: 400% 400%;

  -webkit-animation: animeGrad 30s ease infinite;
  -moz-animation: animeGrad 30s ease infinite;
  animation: animeGrad 30s ease infinite;
}

@-webkit-keyframes animeGrad {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}
@-moz-keyframes animeGrad {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}
@keyframes animeGrad {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

.rex2 {
  box-shadow: -1px 2px 22px 8px rgba(171, 171, 171, 0.54);
  -webkit-box-shadow: -1px 2px 22px 8px rgba(171, 171, 171, 0.54);
  -moz-box-shadow: -1px 2px 22px 8px rgba(171, 171, 171, 0.54);
  border-radius: 10px;
}

.rex3 {
  box-shadow: -1px 2px 22px 8px rgba(171, 171, 171, 0.54);
  -webkit-box-shadow: -1px 2px 22px 8px rgba(171, 171, 171, 0.54);
  -moz-box-shadow: -1px 2px 22px 8px rgba(171, 171, 171, 0.54);
  border-radius: 40px;
}

.react-switch-checkbox {
  height: 0;
  width: 0;
  visibility: hidden;
}

.react-switch-label {
  display: flex;
  align-items: center;
  justify-content: space-between;
  cursor: pointer;
  width: 100px;
  height: 42px;
  background: #fff;
  border-radius: 100px;
  position: relative;
  transition: background-color 0.2s;
}

.react-switch-label .react-switch-button {
  content: '';
  position: absolute;
  top: 2px;
  left: 2px;
  width: 45px;
  height: 38px;
  border-radius: 45px;
  transition: 0.2s;
  background: #fff;
  box-shadow: 0 0 2px 0 rgba(10, 10, 10, 0.29);
}

.react-switch-checkbox:checked + .react-switch-label .react-switch-button {
  left: calc(100% - 2px);
  transform: translateX(-100%);
}

.react-switch-label:active .react-switch-button {
  width: 60px;
}

.purp {
  /* ff 3.6+ */
  background: -moz-linear-gradient(
    90deg,
    rgba(162, 0, 255, 1) 0%,
    rgba(238, 130, 238, 1) 100%
  );

  /* safari 5.1+,chrome 10+ */
  background: -webkit-linear-gradient(
    90deg,
    rgba(162, 0, 255, 1) 0%,
    rgba(238, 130, 238, 1) 100%
  );

  /* opera 11.10+ */
  background: -o-linear-gradient(
    90deg,
    rgba(162, 0, 255, 1) 0%,
    rgba(238, 130, 238, 1) 100%
  );

  /* ie 6-9 */
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ee82ee', endColorstr='#A200FF', GradientType=0 );

  /* ie 10+ */
  background: -ms-linear-gradient(
    90deg,
    rgba(162, 0, 255, 1) 0%,
    rgba(238, 130, 238, 1) 100%
  );

  /* global 94%+ browsers support */
  background: linear-gradient(
    90deg,
    rgba(162, 0, 255, 1) 0%,
    rgba(238, 130, 238, 1) 100%
  );
}

.text-gradient {
  background: radial-gradient(
    64.18% 64.18% at 71.16% 35.69%,
    #def9fa 0.89%,
    #bef3f5 17.23%,
    #9dedf0 42.04%,
    #7de7eb 55.12%,
    #5ce1e6 71.54%,
    #33bbcf 100%
  );
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  text-fill-color: transparent;
}

.bg-blue-gradient {
  background: linear-gradient(
    157.81deg,
    #def9fa -43.27%,
    #bef3f5 -21.24%,
    #9dedf0 12.19%,
    #7de7eb 29.82%,
    #5ce1e6 51.94%,
    #33bbcf 90.29%
  );
}

.bg-black-gradient {
  background: linear-gradient(
    144.39deg,
    #ffffff -278.56%,
    #6d6d6d -78.47%,
    #11101d 91.61%
  );
}

.bg-black-gradient-2 {
  background: linear-gradient(
    -168.39deg,
    #ffffff -278.56%,
    #6d6d6d -78.47%,
    #11101d 91.61%
  );
}

.bg-gray-gradient {
  background: linear-gradient(
    153.47deg,
    rgba(255, 255, 255, 0) -341.94%,
    #14101d 95.11%
  );
}

.bg-discount-gradient {
  background: linear-gradient(125.17deg, #272727 0%, #11101d 100%);
}

.box-shadow {
  box-shadow: 0px 20px 100px -10px rgba(66, 71, 91, 0.1);
}

.sidebar {
  -webkit-animation: slide-top 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  animation: slide-top 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
}

@-webkit-keyframes slide-top {
  0% {
    -webkit-transform: translateY(100px);
    transform: translateY(100px);
  }
  100% {
    -webkit-transform: translateY(0);
    transform: translateY(0);
  }
}

@keyframes slide-top {
  0% {
    -webkit-transform: translateY(100px);
    transform: translateY(100px);
  }
  100% {
    -webkit-transform: translateY(0);
    transform: translateY(0);
  }
}

.feature-card:hover {
  background: var(--black-gradient);
  box-shadow: var(--card-shadow);
}

.feedback-container .feedback-card:last-child {
  margin-right: 0px;
}

.feedback-card {
  background: transparent;
}

.feedback-card:hover {
  background: var(--black-gradient);
}

.blue__gradient {
  background: linear-gradient(180deg, rgba(188, 165, 255, 0) 0%, #214d76 100%);
  filter: blur(123px);
}

.pink__gradient {
  background: linear-gradient(90deg, #f4c4f3 0%, #fc67fa 100%);
  filter: blur(900px);
}

.white__gradient {
  background: rgba(255, 255, 255, 0.6);
  filter: blur(750px);
}

.polygon {
  width: 100px;
  height: 100px;

  background-size: 100%;
  -webkit-clip-path: polygon(50% 0%, 100% 38%, 82% 100%, 18% 100%, 0% 38%);
  clip-path: polygon(50% 0%, 100% 38%, 82% 100%, 18% 100%, 0% 38%);
  box-shadow: 10px 10px 5px 0px rgba(0, 0, 0, 0.75);
  -webkit-box-shadow: 10px 10px 5px 0px rgba(0, 0, 0, 0.75);
  -moz-box-shadow: 10px 10px 5px 0px rgba(0, 0, 0, 0.75);
}

.rex {
  box-shadow: 10px 10px 5px 0px rgba(0, 0, 0, 0.75);
  -webkit-box-shadow: 10px 10px 5px 0px rgba(0, 0, 0, 0.75);
  -moz-box-shadow: 10px 10px 5px 0px rgba(0, 0, 0, 0.75);
  border-radius: 10px;
}

.rex2 {
  box-shadow: -1px 2px 22px 8px rgba(171, 171, 171, 0.54);
  -webkit-box-shadow: -1px 2px 22px 8px rgba(171, 171, 171, 0.54);
  -moz-box-shadow: -1px 2px 22px 8px rgba(171, 171, 171, 0.54);
  border-radius: 10px;
}

.eth {
  /* ff 3.6+ */
  background: -moz-linear-gradient(
    90deg,
    rgba(6, 6, 6, 1) 0%,
    rgba(100, 92, 100, 1) 100%
  );

  /* safari 5.1+,chrome 10+ */
  background: -webkit-linear-gradient(
    90deg,
    rgba(6, 6, 6, 1) 0%,
    rgba(100, 92, 100, 1) 100%
  );

  /* opera 11.10+ */
  background: -o-linear-gradient(
    90deg,
    rgba(6, 6, 6, 1) 0%,
    rgba(100, 92, 100, 1) 100%
  );

  /* ie 6-9 */
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#645C64', endColorstr='#060606', GradientType=0 );

  /* ie 10+ */
  background: -ms-linear-gradient(
    90deg,
    rgba(6, 6, 6, 1) 0%,
    rgba(100, 92, 100, 1) 100%
  );

  /* global 94%+ browsers support */
  background: linear-gradient(
    90deg,
    rgba(6, 6, 6, 1) 0%,
    rgba(100, 92, 100, 1) 100%
  );
}

.custom-scrollbar::-webkit-scrollbar {
  width: 1px;
  cursor: pointer;
}

.custom-scrollbar::-webkit-scrollbar-track {
  background: #808080; /* Tailwind color gray-100 */
  cursor: pointer;
}

.custom-scrollbar::-webkit-scrollbar-thumb {
  background: #111827; /* Tailwind color gray-800 */
  border-radius: 5px;
}

.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: #111827; /* Tailwind color gray-900 */
}

.explore-header-bg {
  background: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)),
    url('/header.jpg');
  background-repeat: repeat-x;
  background-position: center;
}

.marketplace-header-bg {
  background: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)),
    url('/osis.jpg');
  background-repeat: repeat-x;
  background-position: center;
}

.challenges-header-bg {
  background: linear-gradient(to right, rgba(1, 1, 0, 1), transparent),
    url('/challenges.jpg');
  background-repeat: no-repeat;
  background-size: cover;
  background-position: right;
}

.submission-header-bg {
  background: linear-gradient(to right, rgba(1, 0.5, 0, 0.9), transparent),
    url('/planet-07.png');
  background-repeat: no-repeat;
  background-size: cover;
  background-position: right;
}

.border-gradient {
  --gradient-color-1: #211093;
  --gradient-color-2: #a323a3;
  border-width: 3px;
  border-radius: 6px;
  border-style: solid;
  background: linear-gradient(
    45deg,
    var(--gradient-color-1),
    var(--gradient-color-2)
  );
  background-clip: padding-box;
  -webkit-background-clip: padding-box;
  -moz-background-clip: padding;
  border-image: var(--gradient-color-1) 1;
  border-image: linear-gradient(
      45deg,
      var(--gradient-color-1),
      var(--gradient-color-2)
    )
    1;
}

.bg-primer {
  background-image: linear-gradient(
    224.03deg,
    #211093 -1.74%,
    #a323a3 47.01%,
    #ffa01b
  ) !important;
}

/* new */
.border-primer {
  border: transparent;
  position: relative;
}

.border-primer:before {
  content: '';
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: -1;
  margin: -1px;
  border-radius: inherit;
  background: linear-gradient(
    224.03deg,
    #211093 -1.74%,
    #a323a3 47.01%,
    #ffa01b
  ) !important;
}

.react-switch-checkbox {
  height: 0;
  width: 0;
  visibility: hidden;
}

.react-switch-label {
  display: flex;
  align-items: center;
  justify-content: space-between;
  cursor: pointer;
  width: 100px;
  height: 42px;
  background: #fff;
  border-radius: 100px;
  position: relative;
  transition: background-color 0.2s;
}

.react-switch-label .react-switch-button {
  content: '';
  position: absolute;
  top: 2px;
  left: 2px;
  width: 45px;
  height: 38px;
  border-radius: 45px;
  transition: 0.2s;
  background: #fff;
  box-shadow: 0 0 2px 0 rgba(10, 10, 10, 0.29);
}

.react-switch-checkbox:checked + .react-switch-label .react-switch-button {
  left: calc(100% - 2px);
  transform: translateX(-100%);
}

.react-switch-label:active .react-switch-button {
  width: 60px;
}

/* Custom slider thumb styles */
.slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 1rem; /* 16px */
  height: 1rem; /* 16px */
  border-radius: 9999px; /* fully rounded */
  background: white;
  cursor: pointer;
  box-shadow: 0px 0px 0px 3px rgba(156, 163, 175, 0.25); /* ring effect */
}

.slider::-moz-range-thumb {
  width: 1rem; /* 16px */
  height: 1rem; /* 16px */
  border-radius: 9999px;
  background: white;
  cursor: pointer;
  box-shadow: 0px 0px 0px 3px rgba(156, 163, 175, 0.25); /* ring effect */
}

/* Custom slider track styles */
.slider::-webkit-slider-runnable-track {
  background: linear-gradient(to right, #6e5ae7, #e164ec);
  border-radius: 9999px; /* fully rounded */
}

.slider::-moz-range-track {
  background: linear-gradient(to right, #6e5ae7, #e164ec);
  border-radius: 9999px;
}

input[type='range'] {
  -webkit-appearance: none; /* Override default appearance */
  width: 100%; /* Slider width */
  height: 8px; /* Slider height */
}

input[type='range']:focus {
  outline: none; /* Removes the outline */
}

/* Thumb Styles */
input[type='range']::-webkit-slider-thumb {
  -webkit-appearance: none; /* Required for custom thumb */
  appearance: none;
  width: 1.5rem; /* Thumb width */
  height: 1.3rem; /* Thumb height */
  margin-bottom: 9px;
  border-radius: 9999px; /* Makes it circular */
  background: #ffffff; /* Thumb color */
  cursor: pointer;
  box-shadow: 0px 0px 2px 0px #000000; /* Thumb shadow */
}

input[type='range']::-moz-range-thumb {
  width: 1.5rem;
  height: 1.5rem;
  border-radius: 9999px;
  background: #ffffff;
  cursor: pointer;
  box-shadow: 0px 0px 2px 0px #000000;
}

input[type='range']::-ms-thumb {
  width: 1.5rem;
  height: 1.5rem;
  border-radius: 9999px;
  background: #ffffff;
  cursor: pointer;
  box-shadow: 0px 0px 2px 0px #000000;
}

/* Track Styles */
input[type='range']::-webkit-slider-runnable-track {
  width: 100%;
  height: 20px;
  cursor: pointer;
  background: linear-gradient(
    90deg,
    #6e5ae7 0%,
    #e164ec var(--slider-value),
    white var(--slider-value)
  );
  border-radius: 9999px; /* Fully rounded corners */
}

input[type='range']::-moz-range-track {
  width: 100%;
  height: 8px;
  cursor: pointer;
  background: linear-gradient(
    90deg,
    #6e5ae7 0%,
    #e164ec var(--slider-value),
    white var(--slider-value)
  );
  border-radius: 9999px;
}

input[type='range']::-ms-track {
  width: 100%;
  height: 8px;
  cursor: pointer;
  background: transparent;
  border-color: transparent;
  color: transparent;
}

input[type='range']::-ms-fill-lower {
  background: #6e5ae7;
  border-radius: 9999px;
}

input[type='range']::-ms-fill-upper {
  background: white;
  border-radius: 9999px;
}

.gradient-ai-card {
  background: linear-gradient(
    90deg,
    rgba(20, 25, 43, 1) 0%,
    rgba(126, 87, 167, 1) 100%
  );
}

================
File: layout.tsx
================
'use client';

import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';
import { ImageProvider } from '@/context/ImageContext';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ParticleConnectkit } from '@/connectkit';

const inter = Inter({ subsets: ['latin'] });

const queryClient = new QueryClient();

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <ParticleConnectkit>
          <QueryClientProvider client={queryClient}>
            <ImageProvider>{children}</ImageProvider>
          </QueryClientProvider>
        </ParticleConnectkit>
      </body>
    </html>
  );
}

================
File: metadata.ts
================
import { Metadata } from 'next';

export const metadata: Metadata = {
  title: 'Particle Connectkit App',
  description: 'Generated by create next app',
};

================
File: page.tsx
================
'use client';
import React, { useEffect, useState } from 'react';
import LinksGrid from '@/particle-components/Links';
import Header from '@/particle-components/Header';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

// Utilities
import {
  formatBalance,
  truncateAddress,
  copyToClipboard,
} from '@/utils/particle-utils';
import TxNotification from '@/particle-components/TxNotification';

// Particle imports
import {
  ConnectButton,
  useAccount,
  usePublicClient,
  useParticleAuth,
  useSmartAccount,
} from '@particle-network/connectkit';

// Eip1193 and AA Provider
import { AAWrapProvider, SendTransactionMode } from '@particle-network/aa'; // Only needed with Eip1193 provider
import { ethers, type Eip1193Provider } from 'ethers';
import { formatEther, parseEther } from 'viem';

export default function Home() {
  const { isConnected, chainId, isConnecting, isDisconnected, chain } =
    useAccount();
  const { getUserInfo } = useParticleAuth();
  const publicClient = usePublicClient();
  const smartAccount = useSmartAccount();

  const [userAddress, setUserAddress] = useState<string>('');
  const [userInfo, setUserInfo] = useState<Record<string, any> | null>(null);
  const [balance, setBalance] = useState<string | null>(null);
  const [recipientAddress, setRecipientAddress] = useState<string>('');
  const [isSending, setIsSending] = useState<boolean>(false);
  const [transactionHash, setTransactionHash] = useState<string | null>(null);

  // Connection status message based on the account's connection state
  const connectionStatus = isConnecting
    ? 'Connecting...'
    : isConnected
    ? 'Connected'
    : isDisconnected
    ? 'Disconnected'
    : 'Unknown';

  // Init custom provider with gasless transaction mode
  const customProvider = smartAccount
    ? new ethers.BrowserProvider(
        new AAWrapProvider(
          smartAccount,
          SendTransactionMode.Gasless
        ) as Eip1193Provider,
        'any'
      )
    : null;

  /**
   * Fetches the balance of a given address.
   * @param {string} address - The address to fetch the balance for.
   */
  const fetchBalance = async (address: string) => {
    try {
      const balanceResponse = await publicClient?.getBalance({
        address: address as `0x${string}`,
      });

      if (balanceResponse) {
        const balanceInEther = formatEther(balanceResponse);
        setBalance(formatBalance(balanceInEther));
      } else {
        console.error('Balance response is undefined');
        setBalance('0.0');
      }
    } catch (error) {
      console.error('Error fetching balance:', error);
    }
  };

  /**
   * Loads the user's account data such as address, balance, and user info.
   */
  useEffect(() => {
    const loadAccountData = async () => {
      try {
        if (isConnected && smartAccount) {
          const address = await smartAccount.getAddress();
          setUserAddress(address);
          fetchBalance(address);
        }

        if (isConnected) {
          const info = getUserInfo();
          setUserInfo(info);
        }
      } catch (error) {
        console.error('Error loading account data:', error);
      }
    };

    loadAccountData();
  }, [isConnected, smartAccount, getUserInfo, chainId]);

  /**
   * Handles the on-ramp process by opening the Particle Network Ramp in a new window.
   */
  const handleOnRamp = () => {
    const onRampUrl = `https://ramp.particle.network/?fiatCoin=USD&cryptoCoin=ETH&network=Ethereum&theme=dark&language=en`;
    window.open(onRampUrl, '_blank');
  };

  /**
   * Sends a transaction using the native AA Particle provider with gasless mode.
   */
  const executeTxNative = async () => {
    setIsSending(true);
    try {
      const tx = {
        to: recipientAddress,
        value: parseEther('0.01').toString(),
        data: '0x',
      };

      // Fetch feequotes and use verifyingPaymasterGasless for a gasless transaction
      const feeQuotesResult = await smartAccount?.getFeeQuotes(tx);
      const { userOp, userOpHash } =
        feeQuotesResult?.verifyingPaymasterGasless || {};

      if (userOp && userOpHash) {
        const txHash =
          (await smartAccount?.sendUserOperation({
            userOp,
            userOpHash,
          })) || null;

        setTransactionHash(txHash);
        console.log('Transaction sent:', txHash);
      } else {
        console.error('User operation is undefined');
      }
    } catch (error) {
      console.error('Failed to send transaction:', error);
    } finally {
      setIsSending(false);
    }
  };

  /**
   * Sends a transaction using the ethers.js library.
   * This transaction is gasless since the customProvider is initialized as gasless
   */
  const executeTxEthers = async () => {
    if (!customProvider) return;

    const signer = await customProvider.getSigner();
    setIsSending(true);
    try {
      const tx = {
        to: recipientAddress,
        value: parseEther('0.01').toString(),
      };

      const txResponse = await signer.sendTransaction(tx);
      const txReceipt = await txResponse.wait();

      setTransactionHash(txReceipt?.hash || null);
    } catch (error) {
      console.error('Failed to send transaction using ethers.js:', error);
    } finally {
      setIsSending(false);
    }
  };

  return (
    <div className="container min-h-screen flex flex-col justify-center items-center mx-auto gap-4">
      <div className="absolute top-6 right-6">
        <ConnectButton label="Click to login" />
      </div>
      <Header />
      <div className="bg-gray-800 p-4 rounded-lg shadow-lg max-w-sm mx-auto mb-4">
        <h2 className="text-md font-semibold text-white">
          Status: {connectionStatus}
        </h2>
      </div>
      {isConnected ? (
        <>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div className="border border-purple-500 p-6 rounded-lg">
              {userInfo && (
                <div className="flex items-center">
                  <h2 className="text-lg font-semibold text-white mr-2">
                    Name: {userInfo.name || 'Loading...'}
                  </h2>
                  {userInfo.avatar && (
                    <img
                      src={userInfo.avatar}
                      alt="User Avatar"
                      className="w-10 h-10 rounded-full"
                    />
                  )}
                </div>
              )}
              <h2 className="text-lg font-semibold mb-2 text-white flex items-center">
                Address:{' '}
                <code>{truncateAddress(userAddress) || 'Loading...'}</code>
                <button
                  className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-1 px-2 ml-2 rounded transition duration-300 ease-in-out transform hover:scale-105 shadow-lg flex items-center"
                  onClick={() => copyToClipboard(userAddress)}
                >
                  📋
                </button>
              </h2>

              <h2 className="text-lg font-semibold mb-2 text-white">
                Chain: <code>{chain?.name || 'Loading...'}</code>
              </h2>
              <h2 className="text-lg font-semibold mb-2 text-white flex items-center">
                Balance: {balance || 'Loading...'}
                <button
                  className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-1 px-2 ml-2 rounded transition duration-300 ease-in-out transform hover:scale-105 shadow-lg flex items-center"
                  onClick={() => fetchBalance(userAddress)}
                >
                  🔄
                </button>
              </h2>
              <button
                className="mt-4 bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded transition duration-300 ease-in-out transform hover:scale-105 shadow-lg"
                onClick={handleOnRamp}
              >
                Buy Crypto with Fiat
              </button>
            </div>

            <div className="border border-purple-500 p-6 rounded-lg">
              <h2 className="text-2xl font-bold mb-2 text-white">
                Send a gasless transaction
              </h2>
              <h2 className="text-lg">
                Send 0.01 {chain?.nativeCurrency.symbol}
              </h2>
              <input
                type="text"
                placeholder="Recipient Address"
                value={recipientAddress}
                onChange={(e) => setRecipientAddress(e.target.value)}
                className="mt-4 p-2 w-full rounded border border-gray-700 bg-gray-900 text-white focus:outline-none focus:ring-2 focus:ring-purple-400"
              />
              <button
                className="mr-4 mt-4 bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded transition duration-300 ease-in-out transform hover:scale-105 shadow-lg"
                onClick={executeTxNative}
                disabled={!recipientAddress || isSending}
              >
                {isSending
                  ? 'Sending...'
                  : `Send 0.01 ${chain?.nativeCurrency.symbol} Particle provider`}
              </button>
              <button
                className="mt-4 bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded transition duration-300 ease-in-out transform hover:scale-105 shadow-lg"
                onClick={executeTxEthers}
                disabled={!recipientAddress || isSending}
              >
                {isSending
                  ? 'Sending...'
                  : `Send 0.01 ${chain?.nativeCurrency.symbol} ethers`}
              </button>
              {transactionHash && (
                <TxNotification
                  hash={transactionHash}
                  blockExplorerUrl={chain?.blockExplorers?.default.url || ''}
                />
              )}
            </div>
          </div>
          <LinksGrid />
          <ToastContainer />
        </>
      ) : (
        <LinksGrid />
      )}
    </div>
  );
}
